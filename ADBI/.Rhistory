str(Credit)
t.test(Credit$income,mu=50)
library(ISLR)
data(Credit)
force(Credit)
t.test(Credit$income,mu=50)
t.test(Credit$Income,mu=50)
t.test(Credit$Income,mu>=50)
t.test(Credit$Income,mu>50)
t.test(Credit$Income,mu=50)
View(Credit)
t.test(Credit$Income,mu=45)
t.test(Credit$Income,mu=45.21889)
t.test(Credit$Income,mu=50)
table(Credit$Married)
table_gender_married <- table(Credit$Gender,Credit$Married)
table_gender_married
chisq.test(table_gender_married)
jornal<-read.csv(".csv")
jornal<-read.csv("e.csv")
setwd("C:/Users/User01/OneDrive/Desktop/Iscte/ADBI/")
print(kmo_result)
cor_matrix <- cor(RH[, c("p1", "p2", "p3", "p4","p5", "p6","p7", "p8", "p9")])
kmo_result <- KMO(cor_matrix)
RH<-read.csv("Estudos_RS.csv")
cor_matrix <- cor(RH[, c("p1", "p2", "p3", "p4","p5", "p6","p7", "p8", "p9")])
kmo_result <- KMO(cor_matrix)
library(corrplot)
install.packages("psych")
install.packages("parameters")
library(psych)
library(ISLR)
install.packages("lawstat")
library("lawstat")
install.packages("dunn.test")
library(dunn.test)
library(corrplot)
install.packages("psych")
install.packages("parameters")
print(kmo_result)
RH<-read.csv("Estudos_RS.csv")
cor_matrix <- cor(RH[, c("p1", "p2", "p3", "p4","p5", "p6","p7", "p8", "p9")])
kmo_result <- KMO(cor_matrix)
library(ISLR)
install.packages("lawstat")
library("lawstat")
install.packages("dunn.test")
library(dunn.test)
library(corrplot)
install.packages("psych")
install.packages("parameters")
library(psych)
library(parameters)
library(ISLR)
library("lawstat")
library(dunn.test)
library(corrplot)
library(psych)
library(parameters)
setwd("C:/Users/User01/OneDrive/Desktop/Iscte/ADBI/")
RH<-read.csv("Estudos_RS.csv")
cor_matrix <- cor(RH[, c("p1", "p2", "p3", "p4","p5", "p6","p7", "p8", "p9")])
kmo_result <- KMO(cor_matrix)
print(kmo_result)
print(bartlett_result)
cortest.bartlett
print(bartlett_result)
#As variaveis são correlacionadas entre si oque
#As variaveis são correlacionadas entre si oque
bartlett_result <- cortest.bartlett(cor_matrix, n = nrow(RH))
print(bartlett_result)
pca_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")], nfactors = 9, rotate = "none")
# Criar tabela com resultados
pca_table <- data.frame(
Componente = 1:length(eigenvalues),
Valor_Proprio = eigenvalues,
Variância_Explicada = variances,
Variância_Acumulada = cum_variances)
print(pca_table)
pca_result <- principal(RH[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")], nfactors = 9, rotate = "none")
variances <- eigenvalues / sum(eigenvalues) * 100
# Tabela com valores próprios e variância
eigenvalues <- pca_result$values
variances <- eigenvalues / sum(eigenvalues) * 100
cum_variances <- cumsum(variances)
# Criar tabela com resultados
pca_table <- data.frame(
Componente = 1:length(eigenvalues),
Valor_Proprio = eigenvalues,
Variância_Explicada = variances,
Variância_Acumulada = cum_variances)
print(pca_table)
# Scree Plot
plot(pca_table$Componente, pca_table$Valor_Proprio,
type = "b",  # Linhas e pontos
main = "Scree Plot",
xlab = "Componente Principal",
ylab = "Valor Próprio (Eigenvalue)",
pch = 19) # Cor da linha e pontos
num_components <- 3
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums(loadings_retidos^2)
print(comunalidades_table)
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums
print(comunalidades_table)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
library(ISLR)
library("lawstat")
library(dunn.test)
library(corrplot)
library(psych)
library(parameters)
setwd("C:/Users/User01/OneDrive/Desktop/Iscte/ADBI/")
RH<-read.csv("Estudos_RS.csv")
cor_matrix <- cor(RH[, c("p1", "p2", "p3", "p4","p5", "p6","p7", "p8", "p9")])
kmo_result <- KMO(cor_matrix)
print(kmo_result)
bartlett_result <- cortest.bartlett(cor_matrix, n = nrow(RH))
print(bartlett_result)
#p-value < 0.05, logo rejeita se H0 de as var serem indepedentes
#As variaveis  são correlacionadas entre si, logo podemos usar todas as variaveis de p1 a p9 para a analise das componentes principais
pca_result <- principal(RH[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")], nfactors = 9, rotate = "none")
# Tabela com valores próprios e variância
eigenvalues <- pca_result$values
variances <- eigenvalues / sum(eigenvalues) * 100
cum_variances <- cumsum(variances)
# Criar tabela com resultados
pca_table <- data.frame(
Componente = 1:length(eigenvalues),
Valor_Proprio = eigenvalues,
Variância_Explicada = variances,
Variância_Acumulada = cum_variances)
print(pca_table)
# Scree Plot
plot(pca_table$Componente, pca_table$Valor_Proprio,
type = "b",  # Linhas e pontos
main = "Scree Plot",
xlab = "Componente Principal",
ylab = "Valor Próprio (Eigenvalue)",
pch = 19) # Cor da linha e pontos
num_components <- 3
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 3))
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Loadings antes da rotação (apenas componentes retidas)
loadings_antes <- pca_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_antes_table <- data.frame(round(loadings_antes, 2))
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Loadings depois da rotação
loadings_rotacao <- rotated_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_rotacao_table <- data.frame(round(loadings_rotacao, 2))
print(comunalidades_table)
# Número de componentes a reter
num_components <- 3
# Cargas fatoriais das componentes retidas
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums(loadings_retidos^2)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Loadings antes da rotação (apenas componentes retidas)
loadings_antes <- pca_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_antes_table <- data.frame(round(loadings_antes, 2))
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Guardar os scores no dataset original
df <- cbind(df, as.data.frame(rotated_result$scores))
# Loadings antes da rotação (apenas componentes retidas)
loadings_antes <- pca_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_antes_table <- data.frame(round(loadings_antes, 2))
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Aplicar rotação Varimax
rotated_result <- principal(df[c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Cargas fatoriais das componentes retidas
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums(loadings_retidos^2)
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
loadings_antes <- pca_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_antes_table <- data.frame(round(loadings_antes, 2))
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")],
nfactors = num_components, rotate = "varimax", cor = TRUE)
# Loadings depois da rotação
loadings_rotacao <- rotated_result$loadings[, 1:num_components]
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")], nfactors = num_components, rotate = "varimax", cor = TRUE)
plot(pca_table$Componente, pca_table$Valor_Proprio,
type = "b",  # Linhas e pontos
main = "Scree Plot",
xlab = "Componente Principal",
ylab = "Valor Próprio (Eigenvalue)",
pch = 19) # Cor da linha e pontos
num_components <- 3
# Cargas fatoriais das componentes retidas
loadings_retidos <- pca_result$loadings[, 1:num_components]
# Comunalidades: Soma dos quadrados dos loadings das componentes retidas
comunalidades <- rowSums(loadings_retidos^2)
# Criar tabela de comunalidades
comunalidades_table <- data.frame(
Variável = rownames(pca_result$loadings),
Comunalidade = round(comunalidades, 2))
print(comunalidades_table)
# Loadings antes da rotação (apenas componentes retidas)
loadings_antes <- pca_result$loadings[, 1:num_components]
# Mostrar os loadings arredondados
loadings_antes_table <- data.frame(round(loadings_antes, 2))
# Aplicar rotação Varimax
rotated_result <- principal(df[, c("p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9")], nfactors = num_components, rotate = "varimax", cor = TRUE)
